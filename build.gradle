import com.github.spotbugs.snom.Effort

plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id "com.github.spotbugs" version "6.0.6"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/" }
    maven { url 'https://maven.isxander.dev/releases' }
    maven {
        name = "Forge"
        url = "https://maven.minecraftforge.net"
    }
}

loom {
	accessWidenerPath = file("src/main/resources/dsurround.accesswidener")
}

spotbugs {
    ignoreFailures = true
    effort = Effort.DEFAULT
    onlyAnalyze = List.of("org.orecruncher.dsurround.*")
    maxHeapSize = "1g"
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    //implementation group: 'com.google.code.spotbugs', name: 'jsr305', version: '4.8.3'

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modImplementation "org.openjdk.nashorn:nashorn-core:${project.nashorn_version}"
    include("org.openjdk.nashorn:nashorn-core:${project.nashorn_version}")

    // Configuration APIs currently supported by Dynamic Surroundings
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.clothapi_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")

    modImplementation "com.github.glitchfiend:GlitchCore-fabric:${minecraft_version}-${glitchcore_version}"
    modImplementation "com.github.glitchfiend:SereneSeasons-fabric:${minecraft_version}-${serene_seasons_version}"
    modImplementation "com.github.glitchfiend:BiomesOPlenty-fabric:${minecraft_version}-${bop_version}"
}

processResources {
    inputs.property "version", project.version
//    filteringCharset 'UTF-8'

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
//    it.options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10|| JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = "${project.archives_base_name}-${project.minecraft_version}"
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    into('/') {
        from('CREDITS.md')
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
